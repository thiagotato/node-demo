Description: >

  This template deploys a VPC, with a pair of public and private subnets spread 
  across two Availabilty Zones. It deploys an Internet Gateway, with a default 
  route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ), 
  and default routes for them in the private subnets.

  It then deploys a highly available ECS cluster using an AutoScaling Group, with 
  ECS hosts distributed across multiple Availability Zones. 

  Finally, it deploys a pair of example ECS services from containers published in 
  Amazon EC2 Container Registry (Amazon ECR).

  Last Modified: 22nd September 2016
  Author: Paul Maddox <pmaddox@amazon.com>

Parameters:
  S3bucket:
    Description: Varivel para url do s3
    Type: String
    Default: s3url


Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${S3bucket}/templates/infrastructure/vpc.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VpcCIDR: 10.180.0.0/16
        PublicSubnet1CIDR: 10.180.8.0/21
        PublicSubnet2CIDR: 10.180.16.0/21
        PrivateSubnet1CIDR: 10.180.24.0/21
        PrivateSubnet2CIDR: 10.180.32.0/21

  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${S3bucket}/templates/infrastructure/security-groups.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !GetAtt VPC.Outputs.VPC

  RDS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${S3bucket}/templates/infrastructure/rds.yaml
      Parameters:
        NetworkStackName: !Ref AWS::StackName
        PrivateSubnet1: !GetAtt VPC.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt VPC.Outputs.PrivateSubnet2
        DatabaseUser: notes_api
        DatabasePassword: notes-api
        DatabaseSec: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
        DatabaseEngine: mysql

  ALB:
    DependsOn: RDS
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${S3bucket}/templates/infrastructure/load-balancers.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !GetAtt VPC.Outputs.VPC
        Subnets: !GetAtt VPC.Outputs.PublicSubnets
        SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup

  ECS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${S3bucket}/templates/infrastructure/ecs-cluster.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        InstanceType: t3.small
        ClusterSize: 2
        VPC: !GetAtt VPC.Outputs.VPC
        SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
        Subnets: !GetAtt VPC.Outputs.PrivateSubnets

  Nodeapp:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${S3bucket}/templates/services/app/service.yaml
      Parameters:
        VPC: !GetAtt VPC.Outputs.VPC
        Cluster: !GetAtt ECS.Outputs.Cluster
        DesiredCount: 2
        Listener: !GetAtt ALB.Outputs.Listener
        Rds: !GetAtt RDS.Outputs.RdsDbURL
        Path: /notes

  LifecycleHook:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${S3bucket}/templates/infrastructure/lifecyclehook.yaml
      Parameters:
        Cluster: !GetAtt ECS.Outputs.Cluster
        ECSAutoScalingGroupName: !GetAtt ECS.Outputs.ECSAutoScalingGroupName

Outputs:
  ProductServiceUrl:
    Description: The Body endpoint for the product service
    Value: !Join ["/", [!GetAtt ALB.Outputs.LoadBalancerUrl, "notes"]]
